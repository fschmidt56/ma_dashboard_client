{"ast":null,"code":"import Style from \"ol/style/Style\";\nimport Stroke from \"ol/style/Stroke\";\nimport Fill from \"ol/style/Fill\";\nimport { proxyUrls } from \"./MapConfig\";\nexport const fillOpacity = 0.75;\nexport function defaultStyle(feature) {\n  let style = new Style({\n    fill: new Fill({\n      color: getFillColor(feature.get('count'))\n    }),\n    stroke: new Stroke({\n      color: getFillColor(feature.get('count'))\n    })\n  });\n  return style;\n}\nlet collArr = [];\n\nfunction getFillColor(d, data) {\n  return d > 430 ? `rgba(179,0,0,${fillOpacity})` : d > 350 ? `rgba(227,74,51,${fillOpacity})` : d > 270 ? `rgba(252,141,89,${fillOpacity})` : d > 190 ? `rgba(253,187,132,${fillOpacity})` : d > 110 ? `rgba(253,212,158,${fillOpacity})` : d > 30 ? `rgba(254,240,217,${fillOpacity})` : `rgba(180,180,180,${fillOpacity})`;\n}\n\nloadJSON(proxyUrls[2]);\n\nasync function loadJSON(fname) {\n  var response = await fetch(fname);\n  var j = await response.json();\n  var t = await j.forEach(item => collArr.push(item));\n  let result = await t;\n  console.log(collArr);\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/utils/MapStyles.tsx"],"names":["Style","Stroke","Fill","proxyUrls","fillOpacity","defaultStyle","feature","style","fill","color","getFillColor","get","stroke","collArr","d","data","loadJSON","fname","response","fetch","j","json","t","forEach","item","push","result","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAGA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,WAAmB,GAAG,IAA5B;AAEP,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAAmD;AACtD,MAAIC,KAAY,GAAG,IAAIP,KAAJ,CAAU;AACzBQ,IAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS;AACXO,MAAAA,KAAK,EAAEC,YAAY,CAACJ,OAAO,CAACK,GAAR,CAAY,OAAZ,CAAD;AADR,KAAT,CADmB;AAIzBC,IAAAA,MAAM,EAAE,IAAIX,MAAJ,CAAW;AACfQ,MAAAA,KAAK,EAAEC,YAAY,CAACJ,OAAO,CAACK,GAAR,CAAY,OAAZ,CAAD;AADJ,KAAX;AAJiB,GAAV,CAAnB;AAQA,SAAOJ,KAAP;AACH;AAED,IAAIM,OAAgB,GAAG,EAAvB;;AACA,SAASH,YAAT,CAAsBI,CAAtB,EAAiCC,IAAjC,EAAiD;AAC1C,SAAOD,CAAC,GAAG,GAAJ,GAAY,gBAAeV,WAAY,GAAvC,GACHU,CAAC,GAAG,GAAJ,GAAY,kBAAiBV,WAAY,GAAzC,GACAU,CAAC,GAAG,GAAJ,GAAY,mBAAkBV,WAAY,GAA1C,GACAU,CAAC,GAAG,GAAJ,GAAa,oBAAmBV,WAAY,GAA5C,GACAU,CAAC,GAAG,GAAJ,GAAa,oBAAmBV,WAAY,GAA5C,GACAU,CAAC,GAAG,EAAJ,GAAY,oBAAmBV,WAAY,GAA3C,GACY,oBAAmBA,WAAY,GAN/C;AAOF;;AACLY,QAAQ,CAACb,SAAS,CAAC,CAAD,CAAV,CAAR;;AACI,eAAea,QAAf,CAAwBC,KAAxB,EAAuC;AACnC,MAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACF,KAAD,CAA1B;AACA,MAAIG,CAAC,GAAI,MAAMF,QAAQ,CAACG,IAAT,EAAf;AACA,MAAIC,CAAC,GAAG,MAAMF,CAAC,CAACG,OAAF,CAAWC,IAAD,IAAkBX,OAAO,CAACY,IAAR,CAAaD,IAAb,CAA5B,CAAd;AACA,MAAIE,MAAM,GAAG,MAAMJ,CAAnB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ;AACA,SAAOa,MAAP;AACH","sourcesContent":["import Style from \"ol/style/Style\";\r\nimport Stroke from \"ol/style/Stroke\";\r\nimport Fill from \"ol/style/Fill\";\r\nimport { FeatureLike } from \"ol/Feature\";\r\nimport { MapUtils } from \"./MapUtils\";\r\nimport { proxyUrls } from \"./MapConfig\";\r\n\r\nexport const fillOpacity: number = 0.75;\r\n\r\nexport function defaultStyle(feature: FeatureLike): Style {\r\n    let style: Style = new Style({\r\n        fill: new Fill({\r\n            color: getFillColor(feature.get('count')),\r\n        }),\r\n        stroke: new Stroke({\r\n            color: getFillColor(feature.get('count')),\r\n        })\r\n    });\r\n    return style;\r\n}\r\n\r\nlet collArr:number[] = [];\r\nfunction getFillColor(d: number, data?:number[]) {\r\n       return d > 430  ? `rgba(179,0,0,${fillOpacity})` :\r\n           d > 350  ? `rgba(227,74,51,${fillOpacity})` :\r\n           d > 270  ? `rgba(252,141,89,${fillOpacity})` :\r\n           d > 190   ? `rgba(253,187,132,${fillOpacity})` :\r\n           d > 110   ? `rgba(253,212,158,${fillOpacity})` :\r\n           d > 30   ? `rgba(254,240,217,${fillOpacity})` :\r\n                      `rgba(180,180,180,${fillOpacity})`;\r\n    }\r\nloadJSON(proxyUrls[2])\r\n    async function loadJSON(fname: string) {\r\n        var response = await fetch(fname)\r\n        var j =  await response.json()\r\n        var t = await j.forEach((item: number) => collArr.push(item))\r\n        let result = await t\r\n        console.log(collArr)\r\n        return result;\r\n    }\r\n"]},"metadata":{},"sourceType":"module"}