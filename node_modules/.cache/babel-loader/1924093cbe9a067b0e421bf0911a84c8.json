{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\dashboard_client\\\\src\\\\components\\\\DistrictInfo.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport Button from './Button';\nimport { proxyUrls } from '../utils/MapConfig';\n\nconst DistrictInfo = props => {\n  const [district, setDistrict] = useState([]);\n  const [fetched, setFetched] = useState(false);\n  const {\n    title,\n    fetchUrl,\n    defaultText\n  } = props;\n\n  function buttonClick() {\n    fetch(proxyUrls[4]).then(response => response.json()).then(data => {\n      const obj = data[0];\n      const values = Object.keys(obj).map(key => {\n        return obj[key];\n      }); //@ts-ignore\n\n      setDistrict(values);\n    }).then(() => setFetched(true));\n  }\n\n  useEffect(() => {\n    let dropdown = document.createElement('select');\n    dropdown.length = 0;\n    let defaultOption = document.createElement('option');\n    defaultOption.text = defaultText;\n    dropdown.add(defaultOption);\n    dropdown.selectedIndex = 0;\n    document.getElementsByClassName('dropdown')[0].appendChild(dropdown);\n    const url = fetchUrl;\n    fetch(url).then(function (response) {\n      if (response.status !== 200) {\n        console.log('Status Code not 200: ' + response.status);\n        return;\n      }\n\n      response.json().then(data => {\n        let option;\n\n        for (let i = 0; i < data.length; i++) {\n          option = document.createElement('option');\n          option.text = data[i].stt_name;\n          option.value = data[i].stt_name;\n          dropdown.add(option);\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    text: \"Stadtteildaten abrufen\",\n    clickButton: buttonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), fetched ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, \"Im gew\\xE4hlten Stadtteil existieren im zu Grunde liegenden Datensatz \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 87\n    }\n  }, district[0]), \" Hausumringe. In \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 124\n    }\n  }, district[1], \" (\", district[3], \"%)\"), \" davon haben sich mit Corona infizierte Personen aufgehalten. Nicht betroffen sind somit \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 250\n    }\n  }, district[2], \" (\", district[4], \"%)\"), \".\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"Keine Daten.\"));\n};\n\nexport default DistrictInfo;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/components/DistrictInfo.tsx"],"names":["React","useEffect","useState","Button","proxyUrls","DistrictInfo","props","district","setDistrict","fetched","setFetched","title","fetchUrl","defaultText","buttonClick","fetch","then","response","json","data","obj","values","Object","keys","map","key","dropdown","document","createElement","length","defaultOption","text","add","selectedIndex","getElementsByClassName","appendChild","url","status","console","log","option","i","stt_name","value","catch","err"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { IDistrictInfoProps } from '../types/types';\r\nimport Button from './Button'\r\nimport { proxyUrls } from '../utils/MapConfig';\r\n\r\nconst DistrictInfo = (props: IDistrictInfoProps) => {\r\n\r\n    const [district, setDistrict] = useState([]);\r\n    const [fetched, setFetched] = useState(false);\r\n\r\n    const {\r\n        title,\r\n        fetchUrl,\r\n        defaultText,\r\n    } = props\r\n\r\n    function buttonClick() {\r\n        fetch(proxyUrls[4])\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const obj = data[0];\r\n                const values: number[] = Object.keys(obj).map(key => { return obj[key]; });\r\n                //@ts-ignore\r\n                setDistrict(values)\r\n            })\r\n            .then(() => setFetched(true))\r\n    }\r\n\r\n    useEffect(() => {\r\n        let dropdown = document.createElement('select');\r\n        dropdown.length = 0;\r\n\r\n        let defaultOption = document.createElement('option');\r\n        defaultOption.text = defaultText;\r\n\r\n        dropdown.add(defaultOption);\r\n        dropdown.selectedIndex = 0;\r\n        document.getElementsByClassName('dropdown')[0].appendChild(dropdown);\r\n\r\n        const url = fetchUrl;\r\n\r\n        fetch(url)\r\n            .then(\r\n                function (response) {\r\n                    if (response.status !== 200) {\r\n                        console.log('Status Code not 200: ' +\r\n                            response.status);\r\n                        return;\r\n                    }\r\n\r\n                    response.json().then(data => {\r\n                        let option;\r\n\r\n                        for (let i = 0; i < data.length; i++) {\r\n                            option = document.createElement('option');\r\n                            option.text = data[i].stt_name;\r\n                            option.value = data[i].stt_name;\r\n                            dropdown.add(option);\r\n                        }\r\n                    });\r\n                }\r\n            )\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <p>{title}</p>\r\n            <div className='dropdown'></div>\r\n            <Button\r\n                text='Stadtteildaten abrufen'\r\n                clickButton={buttonClick}\r\n            />\r\n            {fetched ?\r\n                <p>Im gew√§hlten Stadtteil existieren im zu Grunde liegenden Datensatz <b>{district[0]}</b> Hausumringe. In <b>{district[1]} ({district[3]}%)</b> davon haben sich mit Corona infizierte Personen aufgehalten. Nicht betroffen sind somit <b>{district[2]} ({district[4]}%)</b>.</p>\r\n                :\r\n                <p>Keine Daten.</p>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DistrictInfo;"]},"metadata":{},"sourceType":"module"}