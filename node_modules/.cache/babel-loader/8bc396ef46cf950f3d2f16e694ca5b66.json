{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\dashboard_client\\\\src\\\\components\\\\DistrictInfo.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport Button from './Button';\nimport { proxyUrls } from '../utils/MapConfig';\n\nconst DistrictInfo = props => {\n  const [districtData, setDistrictData] = useState([]);\n  const [fetched, setFetched] = useState(false);\n  const [district, setDistrict] = useState('');\n  const {\n    title,\n    fetchUrl,\n    defaultText\n  } = props;\n\n  function buttonClick() {\n    console.log(district);\n    fetch(`${proxyUrls[4]}?stt_name=${district}`).then(response => response.json()).then(data => {\n      const obj = data[0];\n      const values = Object.keys(obj).map(key => {\n        return obj[key];\n      }); //@ts-ignore\n\n      setDistrictData(values);\n    }).then(() => setFetched(true));\n  }\n\n  useEffect(() => {\n    let dropdown = document.createElement('select');\n    dropdown.length = 0;\n    let defaultOption = document.createElement('option');\n    defaultOption.text = defaultText;\n    dropdown.add(defaultOption);\n    dropdown.addEventListener('change', e => setDistrict(e.target.value));\n    dropdown.selectedIndex = 0;\n    document.getElementsByClassName('dropdown')[0].appendChild(dropdown);\n    const url = fetchUrl;\n    fetch(url).then(response => {\n      if (response.status !== 200) {\n        console.log('Status Code not 200: ' + response.status);\n        return;\n      }\n\n      response.json().then(data => {\n        let option;\n\n        for (let i = 0; i < data.length; i++) {\n          option = document.createElement('option');\n          option.text = data[i].stt_name;\n          option.value = data[i].stt_name;\n          dropdown.add(option);\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    text: \"Stadtteildaten abrufen\",\n    clickButton: buttonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), fetched ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, \"Im gew\\xE4hlten Stadtteil \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 43\n    }\n  }, district), \" existieren im zu Grunde liegenden Datensatz \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 105\n    }\n  }, districtData[0]), \" Hausumringe. In \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 146\n    }\n  }, districtData[1], \" (\", districtData[3], \"%)\"), \" davon haben sich mit Corona infizierte Personen aufgehalten. Nicht betroffen sind somit \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 280\n    }\n  }, districtData[2], \" (\", districtData[4], \"%)\"), \".\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Keine Daten.\"));\n};\n\nexport default DistrictInfo;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/components/DistrictInfo.tsx"],"names":["React","useEffect","useState","Button","proxyUrls","DistrictInfo","props","districtData","setDistrictData","fetched","setFetched","district","setDistrict","title","fetchUrl","defaultText","buttonClick","console","log","fetch","then","response","json","data","obj","values","Object","keys","map","key","dropdown","document","createElement","length","defaultOption","text","add","addEventListener","e","target","value","selectedIndex","getElementsByClassName","appendChild","url","status","option","i","stt_name","catch","err"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { IDistrictInfoProps } from '../types/types';\r\nimport Button from './Button'\r\nimport { proxyUrls } from '../utils/MapConfig';\r\nimport { any } from 'prop-types';\r\n\r\nconst DistrictInfo = (props: IDistrictInfoProps) => {\r\n\r\n    const [districtData, setDistrictData] = useState([]);\r\n    const [fetched, setFetched] = useState(false);\r\n    const [district, setDistrict] = useState('');\r\n\r\n    const {\r\n        title,\r\n        fetchUrl,\r\n        defaultText,\r\n    } = props\r\n\r\n    function buttonClick() {\r\n        console.log(district)\r\n        fetch(`${proxyUrls[4]}?stt_name=${district}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const obj = data[0];\r\n                const values: number[] = Object.keys(obj).map(key => { return obj[key]; });\r\n                //@ts-ignore\r\n                setDistrictData(values)\r\n            })\r\n            .then(() => setFetched(true))\r\n    }\r\n\r\n    useEffect(() => {\r\n        let dropdown = document.createElement('select');\r\n        dropdown.length = 0;\r\n\r\n        let defaultOption = document.createElement('option');\r\n        defaultOption.text = defaultText;\r\n\r\n        dropdown.add(defaultOption);\r\n        dropdown.addEventListener('change', (e: any) => setDistrict(e.target!.value) )\r\n        dropdown.selectedIndex = 0;\r\n        document.getElementsByClassName('dropdown')[0].appendChild(dropdown);\r\n\r\n        const url = fetchUrl;\r\n\r\n        fetch(url)\r\n            .then(\r\n                response => {\r\n                    if (response.status !== 200) {\r\n                        console.log('Status Code not 200: ' +\r\n                            response.status);\r\n                        return;\r\n                    }\r\n\r\n                    response.json().then(data => {\r\n                        let option;\r\n\r\n                        for (let i = 0; i < data.length; i++) {\r\n                            option = document.createElement('option');\r\n                            option.text = data[i].stt_name;\r\n                            option.value = data[i].stt_name;\r\n                            dropdown.add(option);\r\n                        }\r\n                    });\r\n                }\r\n            )\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <p>{title}</p>\r\n            <div className='dropdown' ></div>\r\n            <Button\r\n                text='Stadtteildaten abrufen'\r\n                clickButton={buttonClick}\r\n            />\r\n            {fetched ?\r\n                <p>Im gewählten Stadtteil <b>{district}</b> existieren im zu Grunde liegenden Datensatz <b>{districtData[0]}</b> Hausumringe. In <b>{districtData[1]} ({districtData[3]}%)</b> davon haben sich mit Corona infizierte Personen aufgehalten. Nicht betroffen sind somit <b>{districtData[2]} ({districtData[4]}%)</b>.</p>\r\n                :\r\n                <p>Keine Daten.</p>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DistrictInfo;"]},"metadata":{},"sourceType":"module"}