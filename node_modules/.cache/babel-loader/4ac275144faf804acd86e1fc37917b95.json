{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\dashboard_client\\\\src\\\\components\\\\Table.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { MapUtils } from '../utils/MapUtils';\nimport { proxyUrls } from '../utils/MapConfig';\nimport Loading from './Loading';\n\nconst Table = props => {\n  const {\n    title\n  } = props;\n  const [table, setTable] = useState([]);\n  const [count, setCount] = useState([]);\n  const [fetched, setFetched] = useState(true);\n\n  function createTable() {\n    let result = [];\n    let number = [];\n    MapUtils.getGeojson(proxyUrls[6]).then(features => {\n      for (let i = 0; i < features.length; i++) {\n        result.push(features[i].stt_name);\n        count.push(features[i].anzahl);\n      }\n    }).then(() => {\n      setTable(result);\n      setCount(count);\n    }).then(() => console.log(count)); // .then(() => setFetched(true))\n  }\n\n  useEffect(() => {\n    createTable();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, fetched ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }, title), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, table.map((value, key) => {\n    const tableKey = count[key];\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 37\n      }\n    }, value, \" | \", tableKey);\n  }))) : /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }));\n};\n\nexport default Table;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/components/Table.tsx"],"names":["React","useEffect","useState","MapUtils","proxyUrls","Loading","Table","props","title","table","setTable","count","setCount","fetched","setFetched","createTable","result","number","getGeojson","then","features","i","length","push","stt_name","anzahl","console","log","map","value","key","tableKey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAwB;AAElC,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AAEA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAW,EAAX,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAW,EAAX,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;;AAEA,WAASa,WAAT,GAAuB;AACnB,QAAIC,MAAgB,GAAG,EAAvB;AACA,QAAIC,MAAgB,GAAG,EAAvB;AACAd,IAAAA,QAAQ,CAACe,UAAT,CAAoBd,SAAS,CAAC,CAAD,CAA7B,EACKe,IADL,CACUC,QAAQ,IAAI;AACd,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCL,QAAAA,MAAM,CAACO,IAAP,CAAYH,QAAQ,CAACC,CAAD,CAAR,CAAYG,QAAxB;AACAb,QAAAA,KAAK,CAACY,IAAN,CAAWH,QAAQ,CAACC,CAAD,CAAR,CAAYI,MAAvB;AACH;AACJ,KANL,EAOKN,IAPL,CAOU,MAAM;AACRT,MAAAA,QAAQ,CAACM,MAAD,CAAR;AACAJ,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAVL,EAWKQ,IAXL,CAWU,MAAMO,OAAO,CAACC,GAAR,CAAYhB,KAAZ,CAXhB,EAHmB,CAef;AACP;;AAGDV,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,0CAEQF,OAAO,gBACH,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIL,KAAJ,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQC,KAAK,CAACmB,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC1B,UAAMC,QAAQ,GAAGpB,KAAK,CAACmB,GAAD,CAAtB;AACA,wBACI;AAAI,MAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeD,KAAf,SAAyBE,QAAzB,CADJ;AAGH,GALG,CAFR,CAFJ,CADG,gBAcH,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBZ,CADJ;AAsBH,CArDD;;AAuDA,eAAezB,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ITableProps } from '../types/types';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport { proxyUrls } from '../utils/MapConfig';\r\nimport Loading from './Loading';\r\n\r\nconst Table = (props: ITableProps) => {\r\n\r\n    const { title } = props\r\n\r\n    const [table, setTable] = useState<string[]>([])\r\n    const [count, setCount] = useState<string[]>([])\r\n    const [fetched, setFetched] = useState(true)\r\n\r\n    function createTable() {\r\n        let result: string[] = [];\r\n        let number: string[] = [];\r\n        MapUtils.getGeojson(proxyUrls[6])\r\n            .then(features => {\r\n                for (let i = 0; i < features.length; i++) {\r\n                    result.push(features[i].stt_name)\r\n                    count.push(features[i].anzahl)\r\n                }\r\n            })\r\n            .then(() => {\r\n                setTable(result)\r\n                setCount(count)\r\n            })\r\n            .then(() => console.log(count))\r\n            // .then(() => setFetched(true))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        createTable()\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                fetched ?\r\n                    <>\r\n                        <p>{title}</p>\r\n                        <ul>\r\n                            {\r\n                                table.map((value, key) => {\r\n                                const tableKey = count[key]\r\n                                return (\r\n                                    <li key={key}>{value} | {tableKey}</li>\r\n                                )\r\n                            })}\r\n                        </ul>\r\n                    </>\r\n                    :\r\n                    <Loading />\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;"]},"metadata":{},"sourceType":"module"}