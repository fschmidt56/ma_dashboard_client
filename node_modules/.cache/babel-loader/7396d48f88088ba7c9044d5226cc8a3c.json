{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Documents\\\\dashboard_client\\\\src\\\\components\\\\Table.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { MapUtils } from '../utils/MapUtils';\nimport { proxyUrls } from '../utils/MapConfig';\nimport Loading from './Loading';\n\nconst Table = props => {\n  const [table, setTable] = useState([]);\n  const [count, setCount] = useState([]);\n  const [fetching, setFetching] = useState(true);\n\n  function createTablefromGeoJson() {\n    let result = [];\n    let number = [];\n    MapUtils.getGeojson(proxyUrls[1], fetching).then(data => data).then(featureCollection => featureCollection.jsonb_build_object).then(features => {\n      console.log(features.features);\n\n      for (let i = 0; i < features.features.length; i++) {\n        result.push(features.features[i].properties.stt_name);\n        count.push(features.features[i].properties.count);\n      }\n    }).then(() => {\n      setTable(result);\n      setCount(count);\n    });\n  }\n\n  useEffect(() => {\n    createTablefromGeoJson();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, fetching ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, table.map((value, key) => {\n    const tableKey = count[key];\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 33\n      }\n    }, value, \" | \", tableKey);\n  })));\n};\n\nexport default Table;","map":{"version":3,"sources":["C:/Users/Fabi/Documents/dashboard_client/src/components/Table.tsx"],"names":["React","useEffect","useState","MapUtils","proxyUrls","Loading","Table","props","table","setTable","count","setCount","fetching","setFetching","createTablefromGeoJson","result","number","getGeojson","then","data","featureCollection","jsonb_build_object","features","console","log","i","length","push","properties","stt_name","map","value","key","tableKey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAwB;AAElC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAW,EAAX,CAAlC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAW,EAAX,CAAlC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;;AAEA,WAASY,sBAAT,GAAkC;AAC9B,QAAIC,MAAgB,GAAG,EAAvB;AACA,QAAIC,MAAgB,GAAG,EAAvB;AACAb,IAAAA,QAAQ,CAACc,UAAT,CAAoBb,SAAS,CAAC,CAAD,CAA7B,EAAkCQ,QAAlC,EACKM,IADL,CACUC,IAAI,IAAIA,IADlB,EAEKD,IAFL,CAEUE,iBAAiB,IAAIA,iBAAiB,CAACC,kBAFjD,EAGKH,IAHL,CAGUI,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACA,QAArB;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACA,QAAT,CAAkBI,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/CV,QAAAA,MAAM,CAACY,IAAP,CAAYL,QAAQ,CAACA,QAAT,CAAkBG,CAAlB,EAAqBG,UAArB,CAAgCC,QAA5C;AACAnB,QAAAA,KAAK,CAACiB,IAAN,CAAWL,QAAQ,CAACA,QAAT,CAAkBG,CAAlB,EAAqBG,UAArB,CAAgClB,KAA3C;AACH;AACJ,KATL,EAUKQ,IAVL,CAUU,MAAM;AACRT,MAAAA,QAAQ,CAACM,MAAD,CAAR;AACAJ,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAbL;AAcH;;AAGDT,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,sBAAsB;AACzB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,0CAEQF,QAAQ,gBACJ,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADI,gBAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,KAAK,CAACsB,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACvB,UAAMC,QAAQ,GAAGvB,KAAK,CAACsB,GAAD,CAAtB;AACA,wBACI;AAAI,MAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeD,KAAf,SAAyBE,QAAzB,CADJ;AAGH,GALA,CADL,CAJZ,CADJ;AAkBH,CAhDD;;AAkDA,eAAe3B,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ITableProps } from '../types/types';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport { proxyUrls } from '../utils/MapConfig';\r\nimport Loading from './Loading';\r\n\r\nconst Table = (props: ITableProps) => {\r\n\r\n    const [table, setTable] = useState<string[]>([])\r\n    const [count, setCount] = useState<string[]>([])\r\n    const [fetching, setFetching] = useState(true);\r\n\r\n    function createTablefromGeoJson() {\r\n        let result: string[] = [];\r\n        let number: string[] = [];\r\n        MapUtils.getGeojson(proxyUrls[1], fetching)\r\n            .then(data => data)\r\n            .then(featureCollection => featureCollection.jsonb_build_object)\r\n            .then(features => {\r\n                console.log(features.features)\r\n                for (let i = 0; i < features.features.length; i++) {\r\n                    result.push(features.features[i].properties.stt_name)\r\n                    count.push(features.features[i].properties.count)\r\n                }\r\n            })\r\n            .then(() => {\r\n                setTable(result)\r\n                setCount(count)\r\n            })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        createTablefromGeoJson()\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                fetching ?\r\n                    <Loading /> :\r\n                    <ul>\r\n                        {table.map((value, key) => {\r\n                            const tableKey = count[key]\r\n                            return (\r\n                                <li key={key}>{value} | {tableKey}</li>\r\n                            )\r\n                        })}\r\n\r\n                    </ul>\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;"]},"metadata":{},"sourceType":"module"}