{"ast":null,"code":"import { Map } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport VectorLayer from 'ol/layer/Vector';\nimport XYZSource from 'ol/source/XYZ';\nimport { baseLayerUrl, view } from './MapConfig';\nexport class MapUtils {\n  static createBaseLayer() {\n    const xyzURL = baseLayerUrl;\n    const baseSource = new XYZSource({\n      url: xyzURL\n    });\n    const baseLayer = new TileLayer({\n      source: baseSource\n    });\n    return baseLayer;\n  }\n\n  static createMap(target) {\n    const baseLayer = this.createBaseLayer();\n    const map = new Map({\n      target: target,\n      layers: [baseLayer],\n      view: view\n    });\n    return map;\n  } //creates a vector source fom postgres table\n\n\n  static createPgSource(url) {\n    const source = new VectorSource({\n      format: new GeoJSON()\n    });\n    return source;\n  } //creates a vector layer based on a vector source from a published geoserver layer\n\n\n  static createVector(source) {\n    const vectorLayer = new VectorLayer({\n      source: source,\n      extent: source.getExtent()\n    });\n    return vectorLayer;\n  } //creates a vector layer based on a vector source from a published geoserver layer\n\n\n  static async getGeojson(url) {\n    const response = await fetch(url, {\n      method: 'GET'\n    });\n    return await response.json();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Fabi/Documents/dashboard_client/src/utils/MapUtils.tsx"],"names":["Map","TileLayer","VectorSource","GeoJSON","VectorLayer","XYZSource","baseLayerUrl","view","MapUtils","createBaseLayer","xyzURL","baseSource","url","baseLayer","source","createMap","target","map","layers","createPgSource","format","createVector","vectorLayer","extent","getExtent","getGeojson","response","fetch","method","json"],"mappings":"AACA,SAASA,GAAT,QAAiC,IAAjC;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,YAAT,EAAwCC,IAAxC,QAA6E,aAA7E;AAIA,OAAO,MAAMC,QAAN,CAAe;AAClB,SAAOC,eAAP,GAAyB;AACrB,UAAMC,MAAc,GAAGJ,YAAvB;AACA,UAAMK,UAAqB,GAAG,IAAIN,SAAJ,CAAc;AACxCO,MAAAA,GAAG,EAAEF;AADmC,KAAd,CAA9B;AAGA,UAAMG,SAAoB,GAAG,IAAIZ,SAAJ,CAAc;AACvCa,MAAAA,MAAM,EAAEH;AAD+B,KAAd,CAA7B;AAIA,WAAOE,SAAP;AACH;;AAED,SAAOE,SAAP,CAAiBC,MAAjB,EAAiC;AAC7B,UAAMH,SAAoB,GAAG,KAAKJ,eAAL,EAA7B;AACA,UAAMQ,GAAQ,GAAG,IAAIjB,GAAJ,CAAQ;AACrBgB,MAAAA,MAAM,EAAEA,MADa;AAErBE,MAAAA,MAAM,EAAE,CAACL,SAAD,CAFa;AAGrBN,MAAAA,IAAI,EAAEA;AAHe,KAAR,CAAjB;AAKA,WAAOU,GAAP;AACH,GArBiB,CAuBlB;;;AACA,SAAOE,cAAP,CAAsBP,GAAtB,EAAoC;AAChC,UAAME,MAAoB,GAAG,IAAIZ,YAAJ,CAAiB;AAC1CkB,MAAAA,MAAM,EAAE,IAAIjB,OAAJ;AADkC,KAAjB,CAA7B;AAGA,WAAOW,MAAP;AACH,GA7BiB,CA8BlB;;;AACA,SAAOO,YAAP,CAAoBP,MAApB,EAA0C;AACtC,UAAMQ,WAAwB,GAAG,IAAIlB,WAAJ,CAAgB;AAC7CU,MAAAA,MAAM,EAAEA,MADqC;AAE7CS,MAAAA,MAAM,EAAET,MAAM,CAACU,SAAP;AAFqC,KAAhB,CAAjC;AAIA,WAAOF,WAAP;AACH,GArCiB,CAsClB;;;AACA,eAAaG,UAAb,CAAwBb,GAAxB,EAAoC;AAChC,UAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACf,GAAD,EAAM;AAC9BgB,MAAAA,MAAM,EAAE;AADsB,KAAN,CAA5B;AAGA,WAAO,MAAMF,QAAQ,CAACG,IAAT,EAAb;AACH;;AA5CiB","sourcesContent":["\r\nimport { Map, Geolocation } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport Select from 'ol/interaction/Select';\r\nimport XYZSource from 'ol/source/XYZ';\r\nimport { baseLayerUrl, geoserverWfsUrl, view, trackFeature, proxyUrls } from './MapConfig';\r\nimport { selectedStyle, defaultStyle, activeStyle } from './MapStyles';\r\nimport LineString from 'ol/geom/LineString';\r\n\r\nexport class MapUtils {\r\n    static createBaseLayer() {\r\n        const xyzURL: string = baseLayerUrl;\r\n        const baseSource: XYZSource = new XYZSource({\r\n            url: xyzURL\r\n        });\r\n        const baseLayer: TileLayer = new TileLayer({\r\n            source: baseSource\r\n        });\r\n\r\n        return baseLayer;\r\n    }\r\n\r\n    static createMap(target: string) {\r\n        const baseLayer: TileLayer = this.createBaseLayer();\r\n        const map: Map = new Map({\r\n            target: target,\r\n            layers: [baseLayer],\r\n            view: view\r\n        });\r\n        return map;\r\n    }\r\n\r\n    //creates a vector source fom postgres table\r\n    static createPgSource(url?: string) {\r\n        const source: VectorSource = new VectorSource({\r\n            format: new GeoJSON(),      \r\n        });\r\n        return source;\r\n    }\r\n    //creates a vector layer based on a vector source from a published geoserver layer\r\n    static createVector(source: VectorSource) {\r\n        const vectorLayer: VectorLayer = new VectorLayer({\r\n            source: source,\r\n            extent: source.getExtent(),\r\n        });\r\n        return vectorLayer;\r\n    }\r\n    //creates a vector layer based on a vector source from a published geoserver layer\r\n    static async getGeojson(url:string) {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n   }"]},"metadata":{},"sourceType":"module"}