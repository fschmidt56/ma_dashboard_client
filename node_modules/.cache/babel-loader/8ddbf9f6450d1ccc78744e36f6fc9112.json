{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Documents\\\\dashboard_client\\\\src\\\\components\\\\Map.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport 'ol/ol.css';\nimport { MapUtils } from '../utils/MapUtils';\nimport { proxyUrls } from '../utils/MapConfig';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport VectorSource from 'ol/source/Vector';\nimport VectorLayer from 'ol/layer/Vector';\n\nconst Basemap = props => {\n  //@ts-ignore\n  const [map, setMap] = useState(null);\n  const {\n    id,\n    mapContainer\n  } = props;\n  useEffect(() => {\n    const basemap = MapUtils.createMap(mapContainer);\n    setMap(basemap);\n    MapUtils.getGeojson(proxyUrls[0]).then(data => data).then(featureCollection => featureCollection.jsonb_build_object).then(features => {\n      return new GeoJSON().readFeatures(features);\n    }).then(geojson => {\n      return new VectorSource({\n        format: new GeoJSON(),\n        features: geojson\n      });\n    }).then(source => {\n      return new VectorLayer({\n        source: source,\n        extent: source.getExtent()\n      });\n    }).then(layer => basemap.addLayer(layer));\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: id,\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Basemap;","map":{"version":3,"sources":["C:/Users/Fabi/Documents/dashboard_client/src/components/Map.tsx"],"names":["React","useState","useEffect","MapUtils","proxyUrls","GeoJSON","VectorSource","VectorLayer","Basemap","props","map","setMap","id","mapContainer","basemap","createMap","getGeojson","then","data","featureCollection","jsonb_build_object","features","readFeatures","geojson","format","source","extent","getExtent","layer","addLayer"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAsB;AAClC;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAY,IAAZ,CAA9B;AAEA,QAAM;AAAEW,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAuBJ,KAA7B;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,OAAO,GAAGX,QAAQ,CAACY,SAAT,CAAmBF,YAAnB,CAAhB;AACAF,IAAAA,MAAM,CAACG,OAAD,CAAN;AACAX,IAAAA,QAAQ,CAACa,UAAT,CAAoBZ,SAAS,CAAC,CAAD,CAA7B,EACCa,IADD,CACMC,IAAI,IAAIA,IADd,EAECD,IAFD,CAEME,iBAAiB,IAAIA,iBAAiB,CAACC,kBAF7C,EAGCH,IAHD,CAGMI,QAAQ,IAAI;AAAE,aAAO,IAAIhB,OAAJ,GAAciB,YAAd,CAA2BD,QAA3B,CAAP;AAA6C,KAHjE,EAICJ,IAJD,CAIMM,OAAO,IAAI;AAAC,aAAO,IAAIjB,YAAJ,CAAiB;AACtCkB,QAAAA,MAAM,EAAE,IAAInB,OAAJ,EAD8B;AAEtCgB,QAAAA,QAAQ,EAAEE;AAF4B,OAAjB,CAAP;AAGf,KAPH,EAQCN,IARD,CAQMQ,MAAM,IAAI;AAAE,aAAO,IAAIlB,WAAJ,CAAgB;AACrCkB,QAAAA,MAAM,EAAEA,MAD6B;AAErCC,QAAAA,MAAM,EAAED,MAAM,CAACE,SAAP;AAF6B,OAAhB,CAAP;AAGf,KAXH,EAYCV,IAZD,CAYMW,KAAK,IAAId,OAAO,CAACe,QAAR,CAAiBD,KAAjB,CAZf;AAaH,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACI,uDACI;AAAK,IAAA,EAAE,EAAEhB,EAAT;AAAa,IAAA,SAAS,EAAC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CA7BD;;AA+BA,eAAeJ,OAAf","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapProps, IMapState } from '../types/types';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport { proxyUrls } from '../utils/MapConfig';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport VectorLayer from 'ol/layer/Vector';\r\n\r\nconst Basemap = (props: IMapProps) => {\r\n    //@ts-ignore\r\n    const [map, setMap] = useState<IMapState>(null);\r\n\r\n    const { id, mapContainer } = props\r\n\r\n    useEffect(() => {\r\n        const basemap = MapUtils.createMap(mapContainer);\r\n        setMap(basemap);\r\n        MapUtils.getGeojson(proxyUrls[0])\r\n        .then(data => data)\r\n        .then(featureCollection => featureCollection.jsonb_build_object)\r\n        .then(features => { return new GeoJSON().readFeatures(features) })\r\n        .then(geojson => {return new VectorSource({\r\n            format: new GeoJSON(),\r\n            features: geojson\r\n        })})\r\n        .then(source => { return new VectorLayer({\r\n            source: source,\r\n            extent: source.getExtent(),\r\n        })})\r\n        .then(layer => basemap.addLayer(layer))\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div id={id} className='map'></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Basemap;"]},"metadata":{},"sourceType":"module"}