{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\dashboard_client\\\\src\\\\components\\\\Chart.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport Loading from './Loading';\nimport Tabs from './Tabs';\n\nconst Chart = props => {\n  const [labels, setLabels] = useState([]);\n  const [chartData, setChartData] = useState([]);\n  const [fetchChart, setFetchChart] = useState(false);\n  const {\n    colors,\n    hoverColors,\n    urlToFetch,\n    chartHeading\n  } = props;\n  useEffect(() => {\n    fetch(urlToFetch).then(response => response.json()).then(data => {\n      const obj = data[0];\n      const values = Object.keys(obj).map(key => {\n        return obj[key];\n      });\n      const label = Object.keys(obj).map(key => {\n        return key;\n      }); //@ts-ignore\n\n      setLabels(label); //@ts-ignore\n\n      setChartData(values);\n    }).then(() => setFetchChart(true));\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, fetchChart ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }\n  }, chartHeading), /*#__PURE__*/React.createElement(Doughnut, {\n    data: {\n      labels: labels,\n      datasets: [{\n        data: chartData,\n        backgroundColor: colors,\n        borderWidth: 1,\n        hoverBackgroundColor: hoverColors,\n        hoverBorderWidth: 2\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }));\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/components/Chart.tsx"],"names":["React","useEffect","useState","Doughnut","Loading","Tabs","Chart","props","labels","setLabels","chartData","setChartData","fetchChart","setFetchChart","colors","hoverColors","urlToFetch","chartHeading","fetch","then","response","json","data","obj","values","Object","keys","map","key","label","datasets","backgroundColor","borderWidth","hoverBackgroundColor","hoverBorderWidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAwB;AAElC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAM;AAAEY,IAAAA,MAAF;AAAUC,IAAAA,WAAV;AAAuBC,IAAAA,UAAvB;AAAmCC,IAAAA;AAAnC,MAAoDV,KAA1D;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,KAAK,CAACF,UAAD,CAAL,CACKG,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACV,YAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACA,YAAME,MAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,GAAjB,CAAqBC,GAAG,IAAI;AAAE,eAAOL,GAAG,CAACK,GAAD,CAAV;AAAkB,OAAhD,CAAzB;AACA,YAAMC,KAAe,GAAGJ,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,GAAjB,CAAqBC,GAAG,IAAI;AAAE,eAAOA,GAAP;AAAa,OAA3C,CAAxB,CAHU,CAIV;;AACAnB,MAAAA,SAAS,CAACoB,KAAD,CAAT,CALU,CAMV;;AACAlB,MAAAA,YAAY,CAACa,MAAD,CAAZ;AACH,KAVL,EAWKL,IAXL,CAWU,MAAMN,aAAa,CAAC,IAAD,CAX7B;AAYH,GAbQ,EAaN,EAbM,CAAT;AAeA,sBACI,0CAGQD,UAAU,gBACN,uDACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIK,YAAJ,CAFJ,eAGI,oBAAC,QAAD;AACI,IAAA,IAAI,EAAE;AACFT,MAAAA,MAAM,EAAEA,MADN;AAEFsB,MAAAA,QAAQ,EAAE,CAAC;AACPR,QAAAA,IAAI,EAAEZ,SADC;AAEPqB,QAAAA,eAAe,EAAEjB,MAFV;AAGPkB,QAAAA,WAAW,EAAE,CAHN;AAIPC,QAAAA,oBAAoB,EAAElB,WAJf;AAKPmB,QAAAA,gBAAgB,EAAE;AALX,OAAD;AAFR,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADM,gBAkBN,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBZ,CADJ;AA2BH,CAlDD;;AAoDA,eAAe5B,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { IChartProps } from '../types/types';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport Loading from './Loading';\r\nimport Tabs from './Tabs';\r\n\r\nconst Chart = (props: IChartProps) => {\r\n\r\n    const [labels, setLabels] = useState([]);\r\n    const [chartData, setChartData] = useState([]);\r\n    const [fetchChart, setFetchChart] = useState(false);\r\n\r\n    const { colors, hoverColors, urlToFetch, chartHeading } = props;\r\n\r\n    useEffect(() => {\r\n        fetch(urlToFetch)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const obj = data[0];\r\n                const values: number[] = Object.keys(obj).map(key => { return obj[key]; });\r\n                const label: string[] = Object.keys(obj).map(key => { return key; });\r\n                //@ts-ignore\r\n                setLabels(label)\r\n                //@ts-ignore\r\n                setChartData(values)\r\n            })\r\n            .then(() => setFetchChart(true))\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n\r\n            {\r\n                fetchChart ?\r\n                    <>\r\n                        <Tabs />\r\n                        <p>{chartHeading}</p>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: labels,\r\n                                datasets: [{\r\n                                    data: chartData,\r\n                                    backgroundColor: colors,\r\n                                    borderWidth: 1,\r\n                                    hoverBackgroundColor: hoverColors,\r\n                                    hoverBorderWidth: 2,\r\n                                }]\r\n                            }}\r\n                        />\r\n                    </>\r\n                    :\r\n                    <Loading />\r\n\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}