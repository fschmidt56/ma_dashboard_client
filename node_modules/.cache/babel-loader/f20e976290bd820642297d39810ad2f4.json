{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\dashboard_client\\\\src\\\\components\\\\Map.tsx\";\nimport React, { useEffect } from 'react';\nimport 'ol/ol.css';\nimport { MapUtils } from '../utils/MapUtils';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setMap } from '../redux/actions/setMapAction';\nimport Loading from './Loading';\nimport Style from 'ol/style/Style';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport { fillOpacity } from '../utils/MapStyles';\nimport { setClasses } from '../redux/actions/setClassesAction';\n\nconst Basemap = props => {\n  const map = useSelector(state => state.currentMapState.map);\n  const fetching = useSelector(state => state.currentFetchState.fetching);\n  const classes = useSelector(state => state.currentClassesState.classes);\n  const dispatch = useDispatch();\n  const {\n    id,\n    mapContainer,\n    proxyUrl\n  } = props;\n\n  function defaultStyle(feature) {\n    let style = new Style({\n      fill: new Fill({\n        color: getFillColor(feature.get('count'))\n      }),\n      stroke: new Stroke({\n        color: getFillColor(feature.get('count'))\n      })\n    });\n    return style;\n  }\n\n  function getFillColor(d) {\n    return d > classes[6] ? `rgba(179,0,0,${fillOpacity})` : d > classes[5] ? `rgba(227,74,51,${fillOpacity})` : d > classes[4] ? `rgba(252,141,89,${fillOpacity})` : d > classes[3] ? `rgba(253,187,132,${fillOpacity})` : d > classes[2] ? `rgba(253,212,158,${fillOpacity})` : d > classes[1] ? `rgba(254,240,217,${fillOpacity})` : d > classes[0] ? `rgba(180,180,180,${fillOpacity})` : 'rgba(255,255,255,1)';\n  }\n\n  useEffect(() => {\n    fetch('http://192.168.2.185:8000/range').then(data => data.json()).then(arr => dispatch(setClasses(arr))).then(() => {\n      const basemap = MapUtils.createMap(mapContainer); //@ts-ignore\n\n      dispatch(setMap(basemap));\n      MapUtils.createPgLayer(proxyUrl, basemap, defaultStyle);\n    });\n  }, [classes]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \" \", fetching ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    id: id,\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default Basemap;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/components/Map.tsx"],"names":["React","useEffect","MapUtils","useDispatch","useSelector","setMap","Loading","Style","Fill","Stroke","fillOpacity","setClasses","Basemap","props","map","state","currentMapState","fetching","currentFetchState","classes","currentClassesState","dispatch","id","mapContainer","proxyUrl","defaultStyle","feature","style","fill","color","getFillColor","get","stroke","d","fetch","then","data","json","arr","basemap","createMap","createPgLayer"],"mappings":"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","sourcesContent":["\r\nimport React, { useEffect } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapProps } from '../types/types';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setMap } from '../redux/actions/setMapAction';\r\nimport { RootState } from '../redux/store/store';\r\nimport Loading from './Loading';\r\nimport { FeatureLike } from 'ol/Feature';\r\nimport Style from 'ol/style/Style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport { fillOpacity } from '../utils/MapStyles';\r\nimport { setClasses } from '../redux/actions/setClassesAction';\r\n\r\nconst Basemap = (props: IMapProps) => {\r\n\r\n    const map = useSelector((state: RootState) => state.currentMapState.map)\r\n    const fetching = useSelector((state: RootState) => state.currentFetchState.fetching)\r\n    const classes = useSelector((state: RootState) => state.currentClassesState.classes);\r\n    const dispatch = useDispatch();\r\n\r\n    const { id, mapContainer, proxyUrl } = props\r\n\r\n\r\n    function defaultStyle(feature: FeatureLike): Style {\r\n        let style: Style = new Style({\r\n            fill: new Fill({\r\n                color: getFillColor(feature.get('count')),\r\n            }),\r\n            stroke: new Stroke({\r\n                color: getFillColor(feature.get('count')),\r\n            })\r\n        });\r\n        return style;\r\n    }\r\n    \r\n    function getFillColor(d: number) {\r\n        return d > classes[6] ? `rgba(179,0,0,${fillOpacity})` :\r\n               d > classes[5] ? `rgba(227,74,51,${fillOpacity})` :\r\n               d > classes[4] ? `rgba(252,141,89,${fillOpacity})` :\r\n               d > classes[3] ? `rgba(253,187,132,${fillOpacity})` :\r\n               d > classes[2] ? `rgba(253,212,158,${fillOpacity})` :\r\n               d > classes[1] ? `rgba(254,240,217,${fillOpacity})` :\r\n               d > classes[0] ? `rgba(180,180,180,${fillOpacity})`:   \r\n               'rgba(255,255,255,1)'                    \r\n           }\r\n        \r\n        \r\n    useEffect(() => {\r\n        fetch('http://192.168.2.185:8000/range')\r\n            .then(data => data.json())\r\n            .then(arr => dispatch(setClasses(arr)))\r\n            .then(() => {\r\n                const basemap = MapUtils.createMap(mapContainer)\r\n                //@ts-ignore\r\n                dispatch(setMap(basemap))\r\n                MapUtils.createPgLayer(proxyUrl, basemap, defaultStyle)\r\n            });        \r\n    }, [classes]);\r\n\r\n    return (\r\n        <> {\r\n            fetching ?\r\n                <Loading />\r\n                :\r\n                <div id={id} className='map'>\r\n                </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Basemap;"]},"metadata":{},"sourceType":"module"}