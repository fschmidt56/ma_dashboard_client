{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\dashboard_client\\\\src\\\\components\\\\Chart.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport Loading from './Loading';\n\nconst Chart = props => {\n  const [labels, setLabels] = useState([]);\n  const [chartData, setChartData] = useState([]);\n  const [fetchChart, setFetchChart] = useState(false);\n  const {\n    id,\n    colors,\n    hoverColors,\n    urlToFetch,\n    chartHeading\n  } = props;\n  useEffect(() => {\n    fetchData();\n  }, [urlToFetch]);\n\n  const fetchData = () => fetch(urlToFetch).then(response => response.json()).then(data => {\n    const obj = data[0];\n    const values = Object.keys(obj).map(key => {\n      return obj[key];\n    });\n    const label = Object.keys(obj).map(key => {\n      return key;\n    });\n\n    if (values[0] === null) {\n      return;\n    } else {\n      //@ts-ignore\n      setLabels(label); //@ts-ignore\n\n      setChartData(values);\n    }\n  }).then(() => setFetchChart(true));\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, fetchChart ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, chartHeading), /*#__PURE__*/React.createElement(Doughnut, {\n    key: id,\n    data: {\n      labels: labels,\n      datasets: [{\n        data: chartData,\n        backgroundColor: colors,\n        borderWidth: 0,\n        hoverBackgroundColor: hoverColors\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }));\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/components/Chart.tsx"],"names":["React","useEffect","useState","Doughnut","Loading","Chart","props","labels","setLabels","chartData","setChartData","fetchChart","setFetchChart","id","colors","hoverColors","urlToFetch","chartHeading","fetchData","fetch","then","response","json","data","obj","values","Object","keys","map","key","label","datasets","backgroundColor","borderWidth","hoverBackgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,MAAMC,KAAK,GAAIC,KAAD,IAAwB;AAElC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAM;AACFW,IAAAA,EADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,UAJE;AAKFC,IAAAA;AALE,MAMFX,KANJ;AAQAL,EAAAA,SAAS,CAAC,MAAM;AACbiB,IAAAA,SAAS;AACX,GAFQ,EAEN,CAACF,UAAD,CAFM,CAAT;;AAIA,QAAME,SAAS,GAAG,MAAMC,KAAK,CAACH,UAAD,CAAL,CACnBI,IADmB,CACdC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADE,EAEnBF,IAFmB,CAEdG,IAAI,IAAI;AACV,UAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACA,UAAME,MAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,GAAjB,CAAqBC,GAAG,IAAI;AAAE,aAAOL,GAAG,CAACK,GAAD,CAAV;AAAkB,KAAhD,CAAzB;AACA,UAAMC,KAAe,GAAGJ,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,GAAjB,CAAqBC,GAAG,IAAI;AAAE,aAAOA,GAAP;AAAa,KAA3C,CAAxB;;AACA,QAAIJ,MAAM,CAAC,CAAD,CAAN,KAAc,IAAlB,EAAwB;AACpB;AACH,KAFD,MAGK;AACD;AACAjB,MAAAA,SAAS,CAACsB,KAAD,CAAT,CAFC,CAGD;;AACApB,MAAAA,YAAY,CAACe,MAAD,CAAZ;AACH;AACJ,GAfmB,EAgBnBL,IAhBmB,CAgBd,MAAMR,aAAa,CAAC,IAAD,CAhBL,CAAxB;;AAkBAX,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,0CAGQP,UAAU,gBACN,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIM,YAAJ,CADJ,eAEI,oBAAC,QAAD;AACI,IAAA,GAAG,EAAEJ,EADT;AAEI,IAAA,IAAI,EAAE;AACFN,MAAAA,MAAM,EAAEA,MADN;AAEFwB,MAAAA,QAAQ,EAAE,CAAC;AACPR,QAAAA,IAAI,EAAEd,SADC;AAEPuB,QAAAA,eAAe,EAAElB,MAFV;AAGPmB,QAAAA,WAAW,EAAE,CAHN;AAIPC,QAAAA,oBAAoB,EAAEnB;AAJf,OAAD;AAFR,KAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADM,gBAiBN,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBZ,CADJ;AA0BH,CAlED;;AAoEA,eAAeV,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { IChartProps } from '../types/types';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport Loading from './Loading';\r\nimport { setDistrict } from '../redux/actions/setDistrictAction';\r\n\r\nconst Chart = (props: IChartProps) => {\r\n\r\n    const [labels, setLabels] = useState([]);\r\n    const [chartData, setChartData] = useState([]);\r\n    const [fetchChart, setFetchChart] = useState(false);\r\n\r\n    const {\r\n        id,\r\n        colors,\r\n        hoverColors,\r\n        urlToFetch,\r\n        chartHeading\r\n    } = props;\r\n\r\n    useEffect(() => {\r\n       fetchData() \r\n    }, [urlToFetch])\r\n\r\n    const fetchData = () => fetch(urlToFetch)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const obj = data[0];\r\n            const values: number[] = Object.keys(obj).map(key => { return obj[key]; });\r\n            const label: string[] = Object.keys(obj).map(key => { return key; });\r\n            if (values[0] === null) {\r\n                return;\r\n            }\r\n            else {\r\n                //@ts-ignore\r\n                setLabels(label)\r\n                //@ts-ignore\r\n                setChartData(values)\r\n            }\r\n        })\r\n        .then(() => setFetchChart(true))\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n\r\n            {\r\n                fetchChart ?\r\n                    <>\r\n                        <p>{chartHeading}</p>\r\n                        <Doughnut\r\n                            key={id}\r\n                            data={{\r\n                                labels: labels,\r\n                                datasets: [{\r\n                                    data: chartData,\r\n                                    backgroundColor: colors,\r\n                                    borderWidth: 0,\r\n                                    hoverBackgroundColor: hoverColors,\r\n                                }]\r\n                            }}\r\n                        />\r\n                    </>\r\n                    :\r\n                    <Loading />\r\n\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}