{"ast":null,"code":"import { Map } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport VectorLayer from 'ol/layer/Vector';\nimport XYZSource from 'ol/source/XYZ';\nimport { baseLayerUrl, view } from './MapConfig';\nexport class MapUtils {\n  static createBaseLayer() {\n    const xyzURL = baseLayerUrl;\n    const baseSource = new XYZSource({\n      url: xyzURL\n    });\n    const baseLayer = new TileLayer({\n      source: baseSource\n    });\n    return baseLayer;\n  }\n\n  static createMap(target) {\n    const baseLayer = this.createBaseLayer();\n    const map = new Map({\n      target: target,\n      layers: [baseLayer],\n      view: view\n    });\n    return map;\n  } //creates a vector source fom postgres table\n\n\n  static createPgSource(features) {\n    const source = new VectorSource({\n      format: new GeoJSON(),\n      features: features,\n      strategy: bboxStrategy\n    });\n    return source;\n  } //creates a vector layer based on a pgVectorSource\n\n\n  static createPgVector(source, style) {\n    const vectorLayer = new VectorLayer({\n      source: source,\n      extent: source.getExtent(),\n      style: style\n    });\n    return vectorLayer;\n  } //fetches geojson from pg\n\n\n  static async getGeojson(url) {\n    const response = await fetch(url, {\n      method: 'GET'\n    });\n    return await response.json();\n  }\n\n  static async createPgLayer(url, map, style) {\n    this.getGeojson(url).then(data => data).then(featureCollection => featureCollection.jsonb_build_object).then(features => {\n      return new GeoJSON().readFeatures(features);\n    }).then(geojson => {\n      return this.createPgSource(geojson);\n    }).then(source => {\n      return this.createPgVector(source, style);\n    }).then(layer => map.addLayer(layer));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/utils/MapUtils.tsx"],"names":["Map","TileLayer","VectorSource","GeoJSON","bbox","bboxStrategy","VectorLayer","XYZSource","baseLayerUrl","view","MapUtils","createBaseLayer","xyzURL","baseSource","url","baseLayer","source","createMap","target","map","layers","createPgSource","features","format","strategy","createPgVector","style","vectorLayer","extent","getExtent","getGeojson","response","fetch","method","json","createPgLayer","then","data","featureCollection","jsonb_build_object","readFeatures","geojson","layer","addLayer"],"mappings":"AACA,SAASA,GAAT,QAA6B,IAA7B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAI,IAAIC,YAAjB,QAAqC,oBAArC;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,YAAT,EAAuBC,IAAvB,QAAmC,aAAnC;AAIA,OAAO,MAAMC,QAAN,CAAe;AAClB,SAAOC,eAAP,GAAyB;AACrB,UAAMC,MAAc,GAAGJ,YAAvB;AACA,UAAMK,UAAqB,GAAG,IAAIN,SAAJ,CAAc;AACxCO,MAAAA,GAAG,EAAEF;AADmC,KAAd,CAA9B;AAGA,UAAMG,SAAoB,GAAG,IAAId,SAAJ,CAAc;AACvCe,MAAAA,MAAM,EAAEH;AAD+B,KAAd,CAA7B;AAIA,WAAOE,SAAP;AACH;;AAED,SAAOE,SAAP,CAAiBC,MAAjB,EAAiC;AAC7B,UAAMH,SAAoB,GAAG,KAAKJ,eAAL,EAA7B;AACA,UAAMQ,GAAQ,GAAG,IAAInB,GAAJ,CAAQ;AACrBkB,MAAAA,MAAM,EAAEA,MADa;AAErBE,MAAAA,MAAM,EAAE,CAACL,SAAD,CAFa;AAGrBN,MAAAA,IAAI,EAAEA;AAHe,KAAR,CAAjB;AAKA,WAAOU,GAAP;AACH,GArBiB,CAuBlB;;;AACA,SAAOE,cAAP,CAAsBC,QAAtB,EAA2C;AACvC,UAAMN,MAAoB,GAAG,IAAId,YAAJ,CAAiB;AAC1CqB,MAAAA,MAAM,EAAE,IAAIpB,OAAJ,EADkC;AAE1CmB,MAAAA,QAAQ,EAAEA,QAFgC;AAG1CE,MAAAA,QAAQ,EAAEnB;AAHgC,KAAjB,CAA7B;AAMA,WAAOW,MAAP;AACH,GAhCiB,CAiClB;;;AACA,SAAOS,cAAP,CAAsBT,MAAtB,EAA4CU,KAA5C,EAAkE;AAC9D,UAAMC,WAAwB,GAAG,IAAIrB,WAAJ,CAAgB;AAC7CU,MAAAA,MAAM,EAAEA,MADqC;AAE7CY,MAAAA,MAAM,EAAEZ,MAAM,CAACa,SAAP,EAFqC;AAG7CH,MAAAA,KAAK,EAAEA;AAHsC,KAAhB,CAAjC;AAKA,WAAOC,WAAP;AACH,GAzCiB,CA0ClB;;;AACA,eAAaG,UAAb,CAAwBhB,GAAxB,EAAqC;AACjC,UAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAClB,GAAD,EAAM;AAC9BmB,MAAAA,MAAM,EAAE;AADsB,KAAN,CAA5B;AAGA,WAAO,MAAMF,QAAQ,CAACG,IAAT,EAAb;AACH;;AAED,eAAaC,aAAb,CAA2BrB,GAA3B,EAAwCK,GAAxC,EAAyDO,KAAzD,EAA+E;AAC3E,SAAKI,UAAL,CAAgBhB,GAAhB,EACKsB,IADL,CACUC,IAAI,IAAIA,IADlB,EAEKD,IAFL,CAEUE,iBAAiB,IAAIA,iBAAiB,CAACC,kBAFjD,EAGKH,IAHL,CAGUd,QAAQ,IAAI;AAAE,aAAO,IAAInB,OAAJ,GAAcqC,YAAd,CAA2BlB,QAA3B,CAAP;AAA6C,KAHrE,EAIKc,IAJL,CAIUK,OAAO,IAAI;AAAE,aAAO,KAAKpB,cAAL,CAAoBoB,OAApB,CAAP;AAAqC,KAJ5D,EAKKL,IALL,CAKUpB,MAAM,IAAI;AAAE,aAAO,KAAKS,cAAL,CAAoBT,MAApB,EAA4BU,KAA5B,CAAP;AAA2C,KALjE,EAMKU,IANL,CAMUM,KAAK,IAAIvB,GAAG,CAAEwB,QAAL,CAAcD,KAAd,CANnB;AAOH;;AA1DiB","sourcesContent":["\r\nimport { Map, Feature } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport XYZSource from 'ol/source/XYZ';\r\nimport { baseLayerUrl, view } from './MapConfig';\r\nimport Style, { StyleFunction } from \"ol/style/Style\";\r\n\r\n\r\nexport class MapUtils {\r\n    static createBaseLayer() {\r\n        const xyzURL: string = baseLayerUrl;\r\n        const baseSource: XYZSource = new XYZSource({\r\n            url: xyzURL\r\n        });\r\n        const baseLayer: TileLayer = new TileLayer({\r\n            source: baseSource\r\n        });\r\n\r\n        return baseLayer;\r\n    }\r\n\r\n    static createMap(target: string) {\r\n        const baseLayer: TileLayer = this.createBaseLayer();\r\n        const map: Map = new Map({\r\n            target: target,\r\n            layers: [baseLayer],\r\n            view: view\r\n        });\r\n        return map;\r\n    }\r\n\r\n    //creates a vector source fom postgres table\r\n    static createPgSource(features: Feature[]) {\r\n        const source: VectorSource = new VectorSource({\r\n            format: new GeoJSON(),\r\n            features: features,\r\n            strategy: bboxStrategy,\r\n        });\r\n\r\n        return source;\r\n    }\r\n    //creates a vector layer based on a pgVectorSource\r\n    static createPgVector(source: VectorSource, style: StyleFunction) {\r\n        const vectorLayer: VectorLayer = new VectorLayer({\r\n            source: source,\r\n            extent: source.getExtent(),\r\n            style: style\r\n        });\r\n        return vectorLayer;\r\n    }\r\n    //fetches geojson from pg\r\n    static async getGeojson(url: string) {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n    static async createPgLayer(url: string, map: Map | null, style: StyleFunction) {\r\n        this.getGeojson(url)\r\n            .then(data => data)\r\n            .then(featureCollection => featureCollection.jsonb_build_object)\r\n            .then(features => { return new GeoJSON().readFeatures(features) })\r\n            .then(geojson => { return this.createPgSource(geojson) })\r\n            .then(source => { return this.createPgVector(source, style) })\r\n            .then(layer => map!.addLayer(layer))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}