{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\dashboard_client\\\\src\\\\components\\\\Map.tsx\";\nimport React, { useEffect } from 'react';\nimport 'ol/ol.css';\nimport { MapUtils } from '../utils/MapUtils';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setMap } from '../redux/actions/setMapAction';\nimport { setClasses } from '../redux/actions/setClassesAction';\nimport { setFetch } from '../redux/actions/setFetchingAction';\nimport Loading from './Loading';\nimport Style from 'ol/style/Style';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport { blueColors } from '../utils/MapStyles';\n\nconst Basemap = props => {\n  const map = useSelector(state => state.currentMapState.map);\n  const fetching = useSelector(state => state.currentFetchState.fetching);\n  const classes = useSelector(state => state.currentClassesState.classes);\n  const dispatch = useDispatch();\n  const {\n    id,\n    mapContainer,\n    proxyUrl\n  } = props;\n\n  function defaultStyle(feature) {\n    const featureCount = getFillColor(feature.get('count'), blueColors);\n    let style = new Style({\n      fill: new Fill({\n        color: featureCount\n      }),\n      stroke: new Stroke({\n        color: featureCount\n      })\n    });\n    return style;\n  }\n\n  function getFillColor(d, colorArray) {\n    return d > classes[6] ? colorArray[6] : d > classes[5] ? colorArray[5] : d > classes[4] ? colorArray[4] : d > classes[3] ? colorArray[3] : d > classes[2] ? colorArray[2] : d > classes[1] ? colorArray[1] : d > classes[0] ? colorArray[0] : 'rgba(255,255,255,1)';\n  }\n\n  const initialize = async () => {\n    fetch('http://192.168.2.185:8000/range').then(data => data.json()).then(arr => {\n      dispatch(setClasses(arr));\n    }).then(() => {\n      //@ts-ignore\n      if (!fetching) {\n        dispatch(setFetch(true));\n      } else {\n        const basemap = MapUtils.createMap(mapContainer); //@ts-ignore\n\n        dispatch(setMap(basemap));\n        MapUtils.createPgLayer(proxyUrl, basemap, defaultStyle);\n      }\n    });\n  };\n\n  useEffect(() => {\n    initialize();\n  }, [fetching]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \" \", !fetching ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    id: id,\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default Basemap;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/dashboard_client/src/components/Map.tsx"],"names":["React","useEffect","MapUtils","useDispatch","useSelector","setMap","setClasses","setFetch","Loading","Style","Fill","Stroke","blueColors","Basemap","props","map","state","currentMapState","fetching","currentFetchState","classes","currentClassesState","dispatch","id","mapContainer","proxyUrl","defaultStyle","feature","featureCount","getFillColor","get","style","fill","color","stroke","d","colorArray","initialize","fetch","then","data","json","arr","basemap","createMap","createPgLayer"],"mappings":"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","sourcesContent":["\r\nimport React, { useEffect } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapProps } from '../types/types';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setMap } from '../redux/actions/setMapAction';\r\nimport { setClasses } from '../redux/actions/setClassesAction';\r\nimport { setFetch } from '../redux/actions/setFetchingAction';\r\nimport { RootState } from '../redux/store/store';\r\nimport Loading from './Loading';\r\nimport { FeatureLike } from 'ol/Feature';\r\nimport Style from 'ol/style/Style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport { fillOpacity, blueColors } from '../utils/MapStyles';\r\n\r\n\r\nconst Basemap = (props: IMapProps) => {\r\n\r\n    const map = useSelector((state: RootState) => state.currentMapState.map)\r\n    const fetching = useSelector((state: RootState) => state.currentFetchState.fetching)\r\n    const classes = useSelector((state: RootState) => state.currentClassesState.classes);\r\n    const dispatch = useDispatch();\r\n\r\n    const { id, mapContainer, proxyUrl } = props\r\n\r\n\r\n    function defaultStyle(feature: FeatureLike): Style {\r\n        const featureCount = getFillColor(feature.get('count'), blueColors);\r\n        let style: Style = new Style({\r\n            fill: new Fill({\r\n                color: featureCount,\r\n            }),\r\n            stroke: new Stroke({\r\n                color: featureCount,\r\n            })\r\n        });\r\n        return style;\r\n    }\r\n\r\n    function getFillColor(d: number, colorArray: string[]) {\r\n        return d > classes[6] ? colorArray[6] :\r\n            d > classes[5] ? colorArray[5] :\r\n            d > classes[4] ? colorArray[4] :\r\n            d > classes[3] ? colorArray[3] :\r\n            d > classes[2] ? colorArray[2] :\r\n            d > classes[1] ? colorArray[1] :\r\n            d > classes[0] ? colorArray[0] :\r\n            'rgba(255,255,255,1)'\r\n    }\r\n\r\n    const initialize = async () => {\r\n        fetch('http://192.168.2.185:8000/range')\r\n            .then(data => data.json())\r\n            .then(arr => {\r\n                dispatch(setClasses(arr))\r\n            })\r\n            .then(() => {\r\n                //@ts-ignore\r\n                if (!fetching) { dispatch(setFetch(true)) }\r\n                else {\r\n                    const basemap = MapUtils.createMap(mapContainer)\r\n                    //@ts-ignore\r\n                    dispatch(setMap(basemap))\r\n                    MapUtils.createPgLayer(proxyUrl, basemap, defaultStyle)\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n       initialize()\r\n    }, [fetching]);\r\n\r\n    return (\r\n        <> {\r\n            !fetching ?\r\n                <Loading />\r\n                :\r\n                <div id={id} className='map'>\r\n                </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Basemap;"]},"metadata":{},"sourceType":"module"}